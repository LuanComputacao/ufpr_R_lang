setwd("~/workspace/IAA/IAA004_-_R/exercicios")
source("~/Classificacao.R")
data("iris")
dataset <- iris
head(dataset)
indices <- createDataPartition(dataset$Species, p = 0.80, list=F)
treino <- dataset[indices,]
treino
teste <- dataset[-indices,]
teste
set.seed(7)
rf <- train(Species~., data = treino, method="rf")
warnings()
redicoes.rf <- predict(rf, teste)
redicoes.rf
predicoes.rf <- predict(rf, teste)
confusionMatrix(predicoes.rf, teste$Species)
svm <- train(Species~., data=treino, method = "svmRadial")
predicoes.svm <- predict(svm, teste)
# Treino usando SVM
set.seed(7)
svm <- train(Species~., data=treino, method = "svmRadial")
predicoes.svm <- predict(svm, teste)
confusionMatrix((precicoes.svm, teste$Species))
confusionMatrix(precicoes.svm, teste$Species)
confusionMatrix(predicoes.svm, teste$Species)
setwd("~/workspace/IAA/IAA004_-_R/exercicios/scripts/classificacao")
save(rf, file = "rf.RData")
save(svm, file = "svm.RData")
data("iris")
dataset <- iris
head(dataset)
# Preparação dos dados
indices <- createDataPartition(dataset$Species, p = 0.80, list=F)
treino <- dataset[indices,]
treino
teste <- dataset[-indices,]
teste
# Treino usando RandomForest
set.seed(7)
rf <- train(Species~., data = treino, method="rf")
predicoes.rf <- predict(rf, teste)
confusionMatrix(predicoes.rf, teste$Species)
save(rf, file = "rf.RData")
# Treino usando SVM
set.seed(7)
svm <- train(Species~., data=treino, method = "svmRadial")
predicoes.svm <- predict(svm, teste)
confusionMatrix(predicoes.svm, teste$Species)
save(svm, file = "svm.RData")
rf
str(rf)
str(rf$metric)
rf$metric
rf$modelInfo
rf$modelInfo$levels()
rf$modelInfo$levels
rf$results
rf
confusionMatrix(predicoes.rf, teste$Species)
cm <- confusionMatrix(predicoes.rf, teste$Species)
confusionMatrix_rf <- confusionMatrix(predicoes.rf, teste$Species)
confusionMatrix_rf
confusionMatrix_rf$table
confusionMatrix_rf$positive
confusionMatrix_rf$byClass
confusionMatrix_rf
confusionMatrix_rf$overall
confusionMatrix_rf$overall["Accuracy"]
ifelse(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"], "Random Forest", "SVM")
confusionMatrix_svm <- confusionMatrix(predicoes.svm, teste$Species)
ifelse(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"], "Random Forest", "SVM")
ifelse(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"], confusionMatrix_rf, confusionMatrix_svm)
ifelse(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"], confusionMatrix_rf, confusionMatrix_svm)
confusionMatrix_svm <- confusionMatrix(predicoes.svm, teste$Species)
# Preparação dos dados
indices <- createDataPartition(dataset$Species, p = 0.80, list=F)
treino <- dataset[indices,]
treino
teste <- dataset[-indices,]
teste
# Treino usando RandomForest
set.seed(7)
rf <- train(Species~., data = treino, method="rf")
predicoes.rf <- predict(rf, teste)
confusionMatrix_rf <- confusionMatrix(predicoes.rf, teste$Species)
save(rf, file = "rf.RData")
# Treino usando SVM
set.seed(7)
svm <- train(Species~., data=treino, method = "svmRadial")
predicoes.svm <- predict(svm, teste)
confusionMatrix_svm <- confusionMatrix(predicoes.svm, teste$Species)
save(svm, file = "svm.RData")
ifelse(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"], confusionMatrix_rf, confusionMatrix_svm)
confusionMatrix_svm
ifelse(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"], print(confusionMatrix_rf), print(confusionMatrix_svm))
if(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"]) {
print(confusionMatrix_rf)
} else {
print(confusionMatrix_svm)
}
print("SVM")
print(confusionMatrix_svm)
if(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"]) {
print("Random Forest")
print(confusionMatrix_rf)
} else {
print("SVM")
print(confusionMatrix_svm)
}
# Treino usando RandomForest
set.seed(7)
rf <- train(Species~., data = treino, method="rf")
predicoes.rf <- predict(rf, teste)
confusionMatrix_rf <- confusionMatrix(predicoes.rf, teste$Species)
save(rf, file = "rf.RData")
# Treino usando SVM
set.seed(7)
svm <- train(Species~., data=treino, method = "svmRadial")
predicoes.svm <- predict(svm, teste)
confusionMatrix_svm <- confusionMatrix(predicoes.svm, teste$Species)
save(svm, file = "svm.RData")
if(confusionMatrix_rf$overall["Accuracy"] > confusionMatrix_svm$overall["Accuracy"]) {
print("Random Forest")
print(confusionMatrix_rf)
} else {
print("SVM")
print(confusionMatrix_svm)
}
kages("e1071")
install.packages("kernlab")
install.packages("e1071")
install.packages("kernlab")
install.packages("mlbench")
install.packages("mice")

# Frequênbcia
prop.table(x)
range(x)
range(x)
lista <- rnorm(10)
mean(lista)
median(lista)
weighted.mean(lista)
sd(lista)
lista
min(lista)
max(lista)
quantile(lista)
summary(lista)
x <- c(22, 7, 19, 8, 9, 19, 10)
range(x)
diff(range(x))
sd(x)
# Frequênbcia
prop.table(x)
# Frequênbcia
prop.table(x) * 100
grupoA <- rep("Grupo A", sample(1:100, 1))
grupoB <- rep("Grupo B", sample(1:100, 1))
grupoC <- rep("Grupo C", sample(1:100, 1))
grupos <- sample(c(grupoA, grupoB, grupoC))
table(grupos)
head(iris)
head(iris)
table(iris)
head(iris$Species)
head(iris)
table(iris$Species)
table(iris$Species)
table(iris$Species > 50)
table(iris$Species)
head(iris$Sepal)
head(iris)
table(iris$Sepal.Length)
table(iris$Sepal.Length>5.0)
dados <- c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76,
39, 18, 14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59,
73, 52, 32)
summary(dados)
# Classes de Frequência
interv <- seq(0, 100, 25)
classes <- c("0-24", "25-49", "50-74", "75-100")
interval_slices <- cut(dados, breaks = interv, right=FALSE, labels=classes)
interval_slices
table(interval_slices)
plot(t, xlab = "Classe", ylab = "Frequência")
t <- table(interval_slices)
plot(t, xlab = "Classe", ylab = "Frequência")
rnorm(100)
?rnorm
lista <- rnorm(100)
hist(lista)
hist(t)
plot(t, xlab = "Classe", ylab = "Frequência")
hist(t)
hist(dados, xlab = "Valores", ylab = "Frequência", main = "Meu Histograma")
v_temp <- sample(0:45, n_dados, replace=T)
# Dispersão
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
df <- data.frame(temperatura = v_temp, altitude = v_altitude)
v_altitude <- sample(0:1200, n_dados, replace=T)
df <- data.frame(temperatura = v_temp, altitude = v_altitude)
df
plot(df$altitude, df$temperatura)
plot(df$altitude, df$temperatura, type="l")
plot(df$altitude, seq(df$altitude) type="l")
seq(df$altitude)
plot(df$altitude, c(seq(df$altitude)), type="l")
plot(c(seq(df$altitude)), df$altitude, type="l")
plot(c(sort(df$temperatura)), df$altitude, type="l")
plot(df$altitude, df$temperatura)
plot(c(sort(df$temperatura)), df$altitude, type="l")
#Grafico de Linhas
plot(temperatura=c(sort(df$temperatura)), df$altitude, type="l")
#Grafico de Linhas
plot(c(sort(df$temperatura)), df$altitude, type="l", xlab = "Temperatura")
#Grafico de Linhas
plot(c(sort(df$temperatura)), df$altitude, type="l", xlab = "Temperatura", ylab = "Altitude")
abline(h=mean(df$altitude), col="red")
table(df$temperatura)
plot(table(df$temperatura))
plot(table(df$temperatura), ylab = "Frequência")
hist(df$temperatura)
# Gráfico de Barras
plot(table(df$temperatura), ylab = "Frequência")
barplot(table(df$temperatura), ylab = "Frequência")
pdf(file = "frequencia_de_temperaturas.pdf")
plot(table(df$temperatura), ylab = "Frequência")
dev.off()
setwd("~/workspace/IAA/IAA004 - R/exercícios/estatistica")
pdf(file = "frequencia_de_temperaturas.pdf")
plot(table(df$temperatura), ylab = "Frequência")
dev.off()
png(file = "frequencia_de_temperaturas.png")
plot(table(df$temperatura), ylab = "Frequência")
dev.off()
browseURL("frequencia_de_temperaturas.png")
# Gráfico de Pizza
table(df$temperatura)
# Gráfico de Pizza
pie(table(df$temperatura))
# Gráfico de BoxPlot
cars
# Gráfico de BoxPlot
Cars93
# Gráfico de BoxPlot
cars
# Gráficos para Cars
cars
pie(table(cars$speed))
# Gráficos para Cars
library("MASS")
Cars93
Cars93
pie(table(Cars93))
pie(table(Cars93$Type))
> y <- c(1000, 1500, 1200, 1800, 800, 1000, 500, 3000, 2500, 2000, 800, 1500,
y <- c(1000, 1500, 1200, 1800, 800, 1000, 500, 3000, 2500, 2000, 800, 1500,
2000, 2000)
x <- c(40, 30, 30, 25, 50, 60, 65, 10, 15, 20, 55, 40, 35, 30)
y <- c(1000, 1500, 1200, 1800, 800, 1000, 500, 3000, 2500, 2000, 800, 1500,
2000, 2000)
modelo
modelo <- lm(y ~ x)
modelo
?lm
summary(modelo)
str(modelo)
summary(modelo)
modelo$residuals
resid(modelo)
coef(modelo)
modelo
summary(modelo)
novos <- data.frame(x = c(10, 20, 30))
predict(modelo, novos)
resid(modelo)
plot(x = x, y = y, xlab = "Km", ylab = "Euros")
abline(modelo, col = "red")
plot(resid(modelo))
abline(0,0, col = "blue")
# Plota a reta de regressão
plot(x = x, y = y, xlab = "Km", ylab = "Euros")
plot(resid(modelo))
abline(0,0, col = "blue")
x = c(6.5, 5.8, 7.8, 8.1, 10.4, 12.3, 13.1, 17.4, 20.1, 24.5, 25.5, 27.1)
y = c(1.4, 1.5, 1.7, 1.9, 2.1, 2.2, 2.4, 3.2, 3.7, 4.2, 4.8, 5.2)
modelo <- lm(y ~ x)
modelo
sumary(modelo)
summary(modelo)
modelo$terms
modelo$terms
coef(modelo)
# Gráfico de Dispersão com reta
plot(modelo)
# Gráfico de Dispersão com reta
plot(x=x, y=y)
# Gráfico de Dispersão com reta
plot(x=x, y=y)
abline(modelo)
abline(modelo, col = "red")
abline(modelo, col = "purple")
# Gráfico de Dispersão com reta
plot(x=x, y=y)
abline(modelo, col = "purple")
# Gráfico de Residuos com reta
resid(modelo)
abline(modelo, col = "purple")
# Gráfico de Residuos com reta
plot(resid(modelo))
abline(modelo, col = "purple")
# Gráfico de Residuos com reta
plot(resid(modelo))
abline(0, 0, col = "purple")
# Gráfico de Dispersão com reta
png("exercicio_1_modelo.png")
plot(x=x, y=y)
abline(modelo, col = "purple")
dev.off()
browseURL("exercicio_1_modelo.png")
# Gráfico de Residuos com reta
png("exercicio_1_residuos.png")
plot(resid(modelo))
abline(0, 0, col = "purple")
dev.off()
browseURL("exercicio_1_residuos.png")
setwd("~/workspace/IAA/IAA004_-_R/exercicios")
setwd("~/workspace/IAA/IAA004_-_R/exercicios/scripts/estatistica")
dados <- read.csv("../../datasets/fruitohms.csv")
dados
dados <- read.csv("../../datasets/fruitohms.csv")
dados
modelo <- lm(ohms ~juice, data = dados)
summary(modelo)
plot(dados$ohms ~ dados$juice)
abline(modelo)
?abline
data <- read.csv("../../datasets/GAGurine.csv")
data <- read.csv("../../datasets/GAGurine.csv")
head(data)
# Estatísticas
modelo <- lm( GAG ~ Age, data = data)
# Estatísticas
summary(modelo)
# Equação da reta
coef(modelo)
# Gráfico de dispersão
plot(x = data$Age, y = data$GAG, xlab = "Age", ylab = "GAG")
abline(modelo)
# Gráfico de Residuais
plot(resid(modelo))
abline(0, 0, col = "red")
# Gráfico de dispersão
png("GAGurine_modelo.png")
plot(x = data$Age, y = data$GAG, xlab = "Age", ylab = "GAG")
abline(modelo)
dev.off()
browseURL("GAGurine_modelo.png")
png("GAGurine_residuos.png")
plot(resid(modelo))
abline(0, 0, col = "red")
dev.off()
browserURL("GAGurine_residuos.png")
png("GAGurine_residuos.png")
plot(resid(modelo))
abline(0, 0, col = "red")
dev.off()
browserURL("GAGurine_residuos.png")
# Gráfico de Residuais
png("GAGurine_residuos.png")
plot(resid(modelo))
abline(0, 0, col = "red")
dev.off()
browserURL("GAGurine_residuos.png")
# Gráfico de Residuais
png("GAGurine_residuos.png")
plot(resid(modelo))
abline(0, 0, col = "red")
dev.off()
browserURL("GAGurine_residuos.png")
browserURL("GAGurine_residuos.png")
# Gráfico de dispersão
png("GAGurine_modelo.png")
plot(x = data$Age, y = data$GAG, xlab = "Age", ylab = "GAG")
abline(modelo)
dev.off()
browseURL("GAGurine_modelo.png")
browseURL("GAGurine_residuos.png")
dados <- read.csv("../../datasets/CoolingWater.csv")
head(dados)
modelo <- lm(temp ~ poly(time, 2, raw = T), data = dados)
modelo <- lm(temp ~ poly(time, 2), data = dados)
plot(dados$temp ~ dados$time)
summary(modelo)
predicao <- predict(modelo, dados)
lines(y = predicao, x = dados$time, type="1", col = "red")
predicao <- predict(modelo, dados)
lines(y = predicao, x = dados$time, type="1", col = "red")
lines(y = predicao, x = dados$time, type="l", col = "red")
data <- read.csv("../../datasets/CoolingWater.csv")
head(data)
summary(modelo)
modelo <- lm(temp ~ poly(time, 3), data = data)
summary(modelo)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo, data)
lines(predicao, data$time, type = "l", col = "red")
plot(dados$temp ~ dados$time)
predicao <- predict(modelo, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
data <- read.csv("../../datasets/CoolingWater.csv")
head(data)
modelo_poli_3 <- lm(temp ~ poly(time, 3), data = data)
summary(modelo_poli_3)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo_poli_3, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
modelo_poli_4 <- lm(temp ~ poly(time, 4), data = data)
summary(modelo_poli_4)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo_poli_4, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
modelo_poli_2 <- lm(temp ~ poly(time, 2), data = data)
summary(modelo_poli_2)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo_poli_2, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
modelo_poli_2 <- lm(temp ~ poly(time, 2), data = data)
summary(modelo_poli_2)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo_poli_2, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
modelo_poli_2 <- lm(temp ~ poly(time, 2), data = data)
summary(modelo_poli_2)
plot(dados$temp ~ dados$time)
predicao_2 <- predict(modelo_poli_2, data)
lines(x= predicao_2, y = data$time, type = "l", col = "red")
modelo <- lm(temp ~ poly(time, 2), data = dados)
summary(modelo)
# y = 40.3671-206.6053x+96.7949x
plot(dados$temp ~ dados$time)
# Gera a predição
predicao <- predict(modelo, dados)
# Curva estimada
lines(y = predicao, x = dados$time, type="l", col = "red")
data <- read.csv("../../datasets/CoolingWater.csv")
head(data)
modelo_poli_2 <- lm(temp ~ poly(time, 2), data = data)
summary(modelo_poli_2)
plot(dados$temp ~ dados$time)
predicao_2 <- predict(modelo_poli_2, data)
lines(y = predicao_2, x = dados$time, type="l", col = "red")
modelo_poli_3 <- lm(temp ~ poly(time, 3), data = data)
summary(modelo_poli_3)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo_poli_3, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
modelo_poli_4 <- lm(temp ~ poly(time, 4), data = data)
summary(modelo_poli_4)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo_poli_4, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
modelo_poli_2 <- lm(temp ~ poly(time, 2), data = data)
summary(modelo_poli_2)
plot(dados$temp ~ dados$time)
predicao_2 <- predict(modelo_poli_2, data)
lines(y = predicao_2, x = dados$time, type="l", col = "red")
modelo_poli_2 <- lm(temp ~ poly(time, 2), data = data)
summary(modelo_poli_2)
plot(dados$temp ~ data$time)
predicao_2 <- predict(modelo_poli_2, data)
lines(y = predicao_2, x = data$time, type="l", col = "red")
modelo_poli_3 <- lm(temp ~ poly(time, 3), data = data)
summary(modelo_poli_3)
plot(data$temp ~ data$time)
predicao <- predict(modelo_poli_3, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
modelo_poli_2 <- lm(temp ~ poly(time, 2), data = data)
summary(modelo_poli_2)
plot(data$temp ~ data$time)
predicao_2 <- predict(modelo_poli_2, data)
lines(y = predicao_2, x = data$time, type="l", col = "red")
modelo_poli_3 <- lm(temp ~ poly(time, 3), data = data)
summary(modelo_poli_3)
plot(data$temp ~ data$time)
predicao <- predict(modelo_poli_3, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
modelo_poli_4 <- lm(temp ~ poly(time, 4), data = data)
summary(modelo_poli_4)
plot(data$temp ~ data$time)
predicao_3 <- predict(modelo_poli_3, data)
lines(x= predicao, y = data$time, type = "l", col = "red")
predicao_3 <- predict(modelo_poli_3, data)
lines(x= predicao_3, y = data$time, type = "l", col = "red")
summary(modelo_poli_3)
plot(data$temp ~ data$time)
predicao_3 <- predict(modelo_poli_3, data)
lines(x= predicao_3, y = data$time, type = "l", col = "red")
modelo_poli_4 <- lm(temp ~ poly(time, 4), data = data)
summary(modelo_poli_4)
plot(data$temp ~ data$time)
predicao_4 <- predict(modelo_poli_4, data)
lines(x= predicao_4, y = data$time, type = "l", col = "red")
lines(x= predicao_3, y = data$time, type = "l", col = "red")
lines(y = predicao_2, x = data$time, type="l", col = "red")
plot(data$temp ~ data$time)
lines(x= predicao_2, y = data$time, type = "l", col = "red")
lines(x= predicao_3, y = data$time, type = "l", col = "red")
lines(x= predicao_4, y = data$time, type = "l", col = "red")
plot(data$temp ~ data$time)
lines(x= predicao_2, y = data$time, type = "l", col = "red")
lines(x= predicao_3, y = data$time, type = "l", col = "red")
lines(x= predicao_4, y = data$time, type = "l", col = "red")
modelo_poli_2 <- lm(temp ~ poly(time, 2), data = data)
summary(modelo_poli_2)
plot(data$temp ~ data$time)
predicao_2 <- predict(modelo_poli_2, data)
lines(y = predicao_2, x = data$time, type="l", col = "red")
lines(x= predicao_2, y = data$time, type = "l", col = "green")
lines(y = predicao_2, x = data$time, type="l", col = "red")
plot(data$temp ~ data$time)
lines(y = predicao_2, x = data$time, type="l", col = "green")
lines(y= predicao_3, x = data$time, type = "l", col = "purple")
lines(y= predicao_4, x = data$time, type = "l", col = "red")
pdf("Exercicio_Regressao_poli_1.pdf")
plot(data$temp ~ data$time)
lines(y = predicao_2, x = data$time, type="l", col = "green")
lines(y= predicao_3, x = data$time, type = "l", col = "purple")
lines(y= predicao_4, x = data$time, type = "l", col = "red")
def.off()
dev.off()
install.packages("e1071")
install.packages("randomForest")
install.packages("e1071")
install.packages("randomForest")
library("randomForest")
install.packages("kernlab")
install.packages("randomForest")
install.packages("caret")
